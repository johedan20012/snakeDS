#include "GameManager.h"

GameManager* GameManager::sInstancia = nullptr;

GameManager* GameManager::Instacia(){
    if(sInstancia == nullptr){
        sInstancia = new GameManager();
    }

    return sInstancia;
}

GameManager::GameManager(){

}

GameManager::~GameManager(){
}

void GameManager::Liberar(){
    delete sInstancia;
    sInstancia = nullptr;
}

void GameManager::Run(){
    srand(time(nullptr));

    powerOn(POWER_ALL_2D); ///Prende todos los engine 2D

    ///Mapea el banco A y B para la memoria de los fondos del engine principal y mapea el banco C a la memoria de
    ///fondo del engine secundario
    vramSetBankA(VRAM_A_MAIN_BG_0x06000000);
    vramSetBankB(VRAM_B_MAIN_BG_0x06020000);
    vramSetBankC(VRAM_C_SUB_BG_0x06200000);

    ///Pone a ambos engines en modo 5
    videoSetMode(MODE_5_2D|
                 DISPLAY_BG2_ACTIVE);

    videoSetModeSub(MODE_5_2D|
                    DISPLAY_BG2_ACTIVE);

    fondo2 = bgInit(2,BgType_Bmp8, BgSize_B8_128x128, 0,0);
    dmaCopy(logoInicioBitmap, bgGetGfxPtr(fondo2), logoInicioBitmapLen);
    dmaCopy(logoInicioPal, BG_PALETTE, logoInicioPalLen);
    for(int i  = 0; i<5; i++){
        int offset = (i*2) + 2;
        *(BG_PALETTE + offset) = *(BG_PALETTE + offset-2);
        *(BG_PALETTE + offset+1) = *(BG_PALETTE + offset-1);
        for(int j = 1; j<=2; j++){
            u16 hola = *(BG_PALETTE+offset+j);
            int r = hola&31;
            int g = (hola&992)>>5;
            int b = (hola&31744)>>10;
            hola &= (1<<15);
            r /= 2;
            g /= 2;
            b /= 2;
            *(BG_PALETTE+j+offset) = hola | r | (g<<5) | (b<<10);
        }
    }
    bgSetScroll(fondo2,-83,-81);
    bgUpdate();

    esperar(120);
    for(int i  = 0; i<6; i++){
        for(int  j = 0; j<logoInicioBitmapLen; j++){

        }
        esperar(5);
    }

    esperar(30);

    fondo2 = bgInit(2, BgType_Bmp16, BgSize_B16_256x256, 0, 0);
    fondo2Sub = bgInitSub(2, BgType_Bmp8, BgSize_B8_256x256, 0, 0);

    dmaCopy(fondoInicioBitmap, bgGetGfxPtr(fondo2), 256*256*2);
    dmaCopy(fondoInicioSubBitmap, bgGetGfxPtr(fondo2Sub), fondoInicioSubBitmapLen);
    dmaCopy(fondoInicioSubPal, BG_PALETTE_SUB, 256*2);

    while(1){
        Update();
        Render();

        swiWaitForVBlank();
    }
}

void GameManager::Update(){
    scanKeys();

    if(mEstado == inicio){
        if(keysDown() & KEY_START){
            mEstado = jugando;
            serp = new Serpiente((u16*)bgGetMapPtr(fondo3));
            fruta = new Fruta((u16*)bgGetMapPtr(fondo3));

            bgHide(fondo2);

            fondo2 = bgInit(0, BgType_Text4bpp, BgSize_T_256x256, 1, 5);
            dmaCopy(fondoJuegoTiles, bgGetGfxPtr(fondo2), fondoJuegoTilesLen);
            dmaCopy(fondoJuegoPal, BG_PALETTE+16, fondoJuegoPalLen);
            dmaCopy(fondoJuegoMap,bgGetMapPtr(fondo2), fondoJuegoMapLen);
            bgSetPriority(fondo2,1);

            fondo3 = bgInit(1, BgType_Text4bpp, BgSize_T_256x256, 0, 4);
            dmaCopy(snakeTiles, bgGetGfxPtr(fondo3), snakeTilesLen);
            dmaCopy(snakePal, BG_PALETTE, snakePalLen);
            dmaFillHalfWords(0,bgGetMapPtr(fondo3),2048);
            bgSetPriority(fondo3,0);
        }
    }else if(mEstado == jugando){

        if(fruta->pos.x == serp->cuerpo[serp->cuerpo.size()-1]->posX && fruta->pos.y == serp->cuerpo[serp->cuerpo.size()-1]->posY){
            serp->Crecer();
            fruta->Reubicar();
            //mmEffectEx(&comer);
        }
        serp->Update();

        if(serp->estaMuerta()){
            mEstado = gameover;
        }

    }else if(mEstado == gameover){
        if(keysDown() > 0){
            delete serp;
            delete fruta;
            mEstado = inicio;
        }
    }
}

void GameManager::Render(){
    bgUpdate();

    if(mEstado == jugando){
        serp->Render();

        fruta->Render();
    }
}
